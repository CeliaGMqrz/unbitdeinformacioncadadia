<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Un bit de informacion cada día</title>
    <link>https://unbitdeinformacioncadadia.netlify.app/</link>
    <description>Recent content on Un bit de informacion cada día</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 19 Nov 2020 19:31:53 +0100</lastBuildDate><atom:link href="https://unbitdeinformacioncadadia.netlify.app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Instalar Openstackclient y deshabilitar la seguridad de puertos</title>
      <link>https://unbitdeinformacioncadadia.netlify.app/posts/2020/11/instalar-openstackclient-y-deshabilitar-la-seguridad-de-puertos/</link>
      <pubDate>Thu, 19 Nov 2020 19:31:53 +0100</pubDate>
      
      <guid>https://unbitdeinformacioncadadia.netlify.app/posts/2020/11/instalar-openstackclient-y-deshabilitar-la-seguridad-de-puertos/</guid>
      <description>Necesitamos instalar Openstackclient, para ello lo vamos hacer desde un entorno virtual para no comprometer la paquetería de nuestro sistema, ya que no es necesario para nuestro sistema actualmente.
 Recordamos como creamos un entorno virtual con venv
 Instalamos el paquete necesario para instalar módulos:  apt-get install python3-venv  Desde el usuario sin privilegios podemos crear un entorno virtual con python3:  python3 -m venv entorno  Activar y desactivar el entorno  source entorno/bin/activate (entorno)$ deactivate  Usando el entorno virtual creado previamente, vamos a instalar el paquete Openstackclient (necesitaremos la libreria de python3).</description>
    </item>
    
    <item>
      <title>Crear Autoridad Certificadora y Certificado autofirmado</title>
      <link>https://unbitdeinformacioncadadia.netlify.app/posts/2020/11/crear-autoridad-certificadora-y-certificado-autofirmado/</link>
      <pubDate>Thu, 19 Nov 2020 18:51:45 +0100</pubDate>
      
      <guid>https://unbitdeinformacioncadadia.netlify.app/posts/2020/11/crear-autoridad-certificadora-y-certificado-autofirmado/</guid>
      <description>HTTPS / SSL Tarea 1: Certificado autofirmado PARTE 1 OBJETIVO:
Crear su autoridad certificadora (generar el certificado digital de la CA). Mostrar el fichero de configuración de la AC.
Conocimientos previos:
OpenSSL permite con una serie de comandos crear una autoridad de certificación o CA en la que los servidores y clientes internos confien. Las funciones de la CA incluyen crear certificados a partir de las solicitudes de los certificados para los servidores y también la revocación y renovación de certificados.</description>
    </item>
    
    <item>
      <title>Instalación y configuración inicial de los servidores</title>
      <link>https://unbitdeinformacioncadadia.netlify.app/posts/2020/11/instalaci%C3%B3n-y-configuraci%C3%B3n-inicial-de-los-servidores/</link>
      <pubDate>Wed, 18 Nov 2020 18:22:12 +0100</pubDate>
      
      <guid>https://unbitdeinformacioncadadia.netlify.app/posts/2020/11/instalaci%C3%B3n-y-configuraci%C3%B3n-inicial-de-los-servidores/</guid>
      <description>En esta tarea se va a crear el escenario de trabajo que se va a usar durante todo el curso, que va a constar inicialmente de 3 instancias con nombres relacionados con el libro &amp;ldquo;Don Quijote de la Mancha&amp;rdquo;.
Pasos a realizar:
1. Creación de la red interna:  Nombre red interna de  10.0.1.0/24  2. Creación de las instancias   Dulcinea:
 Debian Buster sobre volumen de 10GB con sabor m1.</description>
    </item>
    
    <item>
      <title>Compilación de un kernel linux a medida</title>
      <link>https://unbitdeinformacioncadadia.netlify.app/posts/2020/11/compilaci%C3%B3n-de-un-kernel-linux-a-medida/</link>
      <pubDate>Sun, 15 Nov 2020 20:07:29 +0100</pubDate>
      
      <guid>https://unbitdeinformacioncadadia.netlify.app/posts/2020/11/compilaci%C3%B3n-de-un-kernel-linux-a-medida/</guid>
      <description>Ejercicio planteado:
Al ser linux un kérnel libre, es posible descargar el código fuente, configurarlo y comprimirlo. Además, esta tarea a priori compleja, es más sencilla de lo que parece gracias a las herramientas disponibles.
En esta tarea debes tratar de compilar un kérnel completamente funcional que reconozca todo el hardware básico de tu equipo y que sea a la vez lo más pequeño posible, es decir que incluya un vmlinuz lo más pequeño posible y que incorpore sólo los módulos imprescindibles.</description>
    </item>
    
    <item>
      <title>Instalación de un entorno LAMP</title>
      <link>https://unbitdeinformacioncadadia.netlify.app/posts/2020/11/instalaci%C3%B3n-de-un-entorno-lamp/</link>
      <pubDate>Wed, 11 Nov 2020 19:21:43 +0100</pubDate>
      
      <guid>https://unbitdeinformacioncadadia.netlify.app/posts/2020/11/instalaci%C3%B3n-de-un-entorno-lamp/</guid>
      <description>Instalación de un servidor LAMP Crea una instancia de vagrant basado en un box de debian o ubuntu  Primero creamos el fichero Vagrantfile  nano Vagrantfile  Le añadimos estas lineas para configurar nuestra máquina debian  # -*- mode: ruby -*- # vi: set ft=ruby : Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.box = &amp;#34;debian/buster64&amp;#34; config.vm.hostname = &amp;#34;debian-cms&amp;#34; config.vm.network :public_network, :bridge=&amp;gt;&amp;#34;enp5s0&amp;#34; end  Levantamos la máquina  vagrant up  Cuando esté lista entramos en la máquina por ssh  vagrant ssh  Una vez dentro le añadimos los repositorios esenciales y actualizamos la máquina  sudo su nano /etc/apt/sources.</description>
    </item>
    
    <item>
      <title>Servidor Nginx</title>
      <link>https://unbitdeinformacioncadadia.netlify.app/posts/2020/11/servidor-nginx/</link>
      <pubDate>Wed, 11 Nov 2020 17:51:13 +0100</pubDate>
      
      <guid>https://unbitdeinformacioncadadia.netlify.app/posts/2020/11/servidor-nginx/</guid>
      <description>Servidor Web Nginxx NGINX es un servidor web open source de alta performance que ofrece el contenido estático de un sitio web de forma rápida y fácil de configurar. Ofrece recursos de equilibrio de carga, proxy inverso y streaming, además de gestionar miles de conexiones simultáneas. El resultado de sus aportes es una mayor velocidad y escalabilidad.
Además de otras tareas, los servidores web son los encargados de la entrega de aplicaciones web, respondiendo a peticiones HTTPS realizadas por usuarios, normalmente desde un navegador web.</description>
    </item>
    
    <item>
      <title>Compilar un programa en C con Makefile</title>
      <link>https://unbitdeinformacioncadadia.netlify.app/posts/2020/10/compilar-un-programa-en-c-con-makefile/</link>
      <pubDate>Sat, 31 Oct 2020 18:13:42 +0100</pubDate>
      
      <guid>https://unbitdeinformacioncadadia.netlify.app/posts/2020/10/compilar-un-programa-en-c-con-makefile/</guid>
      <description>Compilación de un programa en C utilizando un Makefile Requisitos previos  Suponemos que tenemos una máquina virtual con Debian Buster, en este caso voy a usar Vagrant con qemu-kvm para crearla. Necesitaremos tener instalado los paquetes necesarios (vagrant, qemu-kvm, virt-manager&amp;hellip;).  Usaremos el siguiente fichero Vagrantfile:
Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.box = &amp;#34;debian/buster64&amp;#34; config.vm.hostname = &amp;#34;buster&amp;#34; config.vm.synced_folder &amp;#34;.&amp;#34;, &amp;#34;/vagrant&amp;#34;, disabled: true config.vm.provider :libvirt do |libvirt| libvirt.uri = &amp;#39;qemu+unix:///system&amp;#39; libvirt.host = &amp;#34;debian&amp;#34; libvirt.</description>
    </item>
    
    <item>
      <title>Cifrado Asimétrico con GPG y OpenSSL</title>
      <link>https://unbitdeinformacioncadadia.netlify.app/posts/2020/10/cifrado-asim%C3%A9trico-con-gpg-y-openssl/</link>
      <pubDate>Sat, 24 Oct 2020 14:45:15 +0200</pubDate>
      
      <guid>https://unbitdeinformacioncadadia.netlify.app/posts/2020/10/cifrado-asim%C3%A9trico-con-gpg-y-openssl/</guid>
      <description>Práctica: Cifrado asimétrico con gpg y openssl En esta práctica vamos a cifrar ficheros utilizando cifrado asimétrico utilizando el programa gpg.
Cifrado Asimétrico con GPG   Tarea 1: Generación de claves
  Tarea 2: Importar / exportar clave pública
  Tarea 3: Cifrado asimétrico con claves públicas
  Tarea 4: Exportar clave a un servidor público de claves PGP
  Cifrado asimétrico con OPENSSL  Tarea 5: Cifrado asimétrico con openssl  </description>
    </item>
    
    <item>
      <title>Guia de Virtual Hosting Con Apache</title>
      <link>https://unbitdeinformacioncadadia.netlify.app/posts/2020/10/guia-de-virtual-hosting-con-apache/</link>
      <pubDate>Wed, 21 Oct 2020 21:54:22 +0200</pubDate>
      
      <guid>https://unbitdeinformacioncadadia.netlify.app/posts/2020/10/guia-de-virtual-hosting-con-apache/</guid>
      <description>VirtualHosting con Apache Conceptos previos ¿Qué es un sitio web? Un sitio web es un conjunto de páginas web, propiamente dicho. Las páginas están relacionadas entre sí. Y a ese sitio web se accede en una dirección ip y a través de un puerto(80). Normalmente si cambiamos la ip o el puerto serviría otro sitio web.
¿Qué es Hosting Virtual? El término Hosting Virtual se refiere a hacer funcionar más de un sitio web (tales como www.</description>
    </item>
    
    <item>
      <title>Instalación de VisualCode en Debian Buster</title>
      <link>https://unbitdeinformacioncadadia.netlify.app/posts/2020/10/instalaci%C3%B3n-de-visualcode-en-debian-buster/</link>
      <pubDate>Thu, 15 Oct 2020 22:22:11 +0200</pubDate>
      
      <guid>https://unbitdeinformacioncadadia.netlify.app/posts/2020/10/instalaci%C3%B3n-de-visualcode-en-debian-buster/</guid>
      <description>Instalar Visual Code en Debian 10 Instalar dependencias.
$ sudo apt install software-properties-common apt-transport-https Descargamos la llave GPG del repositorio.
sudo wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add - Introducimos el repositorio correspondiente
$ sudo add-apt-repository &amp;#34;deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main&amp;#34; Actualizamos los paquetes
$ sudo apt update Instalamos Visual Code.
$ sudo apt-get install code </description>
    </item>
    
  </channel>
</rss>
